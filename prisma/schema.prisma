generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doctor {
  id         String                  @id @default(cuid())
  email      String                  @unique
  password   String
  name       String?
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  role       Role                    @default(USER)
  caregivers Caregiver[]
  patients   Patient[]
  templates  QuestionnaireTemplate[]
  results    ScreeningResult[]
}

model Caregiver {
  id                     String               @id @default(cuid())
  nama_keluarga          String
  jenis_kelamin          Int
  umur_keluarga          Int
  hubungan_dengan_pasien HubunganDenganPasien
  doctorId               String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  doctor                 Doctor               @relation(fields: [doctorId], references: [id])
  patients               Patient[]
  results                ScreeningResult[]
}

model Patient {
  id                String            @id @default(cuid())
  name              String
  age               Int
  doctorId          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  caregiverId       String?
  jenis_kelamin     Int?
  lama_menderita_dm Float?
  penyakit_lain     String?
  umur_pasien       Int?
  caregiver         Caregiver?        @relation(fields: [caregiverId], references: [id])
  doctor            Doctor            @relation(fields: [doctorId], references: [id])
  results           ScreeningResult[]
}

model QuestionnaireTemplate {
  id                    String                 @id @default(cuid())
  title                 String
  description           String?
  doctorId              String
  questions             Json
  resultTiers           Json
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  jenis_kuesioner       JenisKuesioner         @default(Pasien)
  isPublic              Boolean                @default(false)
  doctor                Doctor                 @relation(fields: [doctorId], references: [id])
  respondentSubmissions RespondentSubmission[]
  results               ScreeningResult[]
}

model ScreeningResult {
  id             String                @id @default(cuid())
  patientId      String?
  doctorId       String
  templateId     String
  date           DateTime              @default(now())
  totalScore     Int
  resultLabel    String
  recommendation String?
  answers        Json
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  caregiverId    String?
  caregiver      Caregiver?            @relation(fields: [caregiverId], references: [id])
  doctor         Doctor                @relation(fields: [doctorId], references: [id])
  patient        Patient?              @relation(fields: [patientId], references: [id])
  template       QuestionnaireTemplate @relation(fields: [templateId], references: [id])
}

model Respondent {
  id                String                 @id @default(cuid())
  email             String                 @unique
  password          String
  name              String?
  patientName       String
  patientAge        Int?
  patientGender     String?
  caregiverName     String?
  caregiverRelation String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  submissions       RespondentSubmission[]
}

model RespondentSubmission {
  id             String                @id @default(cuid())
  respondentId   String
  templateId     String
  fillAs         JenisKuesioner
  totalScore     Int
  resultLabel    String?
  recommendation String?
  answers        Json
  createdAt      DateTime              @default(now())
  respondent     Respondent            @relation(fields: [respondentId], references: [id])
  template       QuestionnaireTemplate @relation(fields: [templateId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum UserRole {
  DOCTOR
  RESPONDENT
}

enum HubunganDenganPasien {
  Anak
  OrangTua
  SaudaraKandung
  Lainnya
}

enum JenisKuesioner {
  Pasien
  Caregiver
  Keduanya
}
